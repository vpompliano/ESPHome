substitutions:
  #   # https://esphome.io/guides/configuration-types.html#substitutions
  device_name: etekcity_esw01 # hostname & entity_id
  friendly_name: etekcity_esw01_plug # Displayed in HA frontend
  ip_address: !secret etekcity_esw01-ip # use /config/esphome/secrets.yaml


esphome:
  # https://esphome.io/components/esphome
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m
  # esp8266_restore_from_flash: true
  # Can cause reduced flash lifetime due to frequent writes, enable as needed

wifi:
  # https://esphome.io/components/wifi
  ssid: !secret wifissid
  password: !secret wifipass
  manual_ip:
    static_ip: ${ip_address}
    gateway: !secret wifigateway
    subnet: !secret wifisubnet
    dns1: !secret wifidns1
    dns2: !secret wifidns2
  domain: !secret domain
  ap:
    ssid: ${friendly_name}_AP
    password: !secret apwifipass
    channel: 1

# web_server:
  # port: 80
  # https://esphome.io/components/web_server.html
  # Can cause high memory usage on ESP8266, enable as needed

logger:
  # https://esphome.io/components/logger

api:
  encryption:
    key: !secret encryption_key
  # https://esphome.io/components/api

ota:
  password: !secret esphome_ota_password
  # https://esphome.io/components/ota

time:
  - platform: homeassistant

status_led:
  pin:
    number: GPIO5

output:
  - platform: gpio
    id: led1
    pin: GPIO16

switch:
  - platform: gpio
    name: "${friendly_name}"
    id: switch1
    pin: GPIO4
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - output.turn_on: led1
    on_turn_off:
      - output.turn_off: led1
  - platform: restart
    name: "Restart"

binary_sensor:
  - platform: status
    name: "Status"
  - platform: gpio
    id: button1
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      - switch.toggle: switch1

sensor:
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s
    # disabled_by_default: true
    # entity_category: diagnostic
  - platform: uptime
    name: "Uptime seconds"
    id: uptime_s
    update_interval: 60s
    # disabled_by_default: true
  - platform: pulse_counter
    pin: GPIO12
    id: "gpio12"
    name: "GPIO12 counter"
    # internal: true
    entity_category: diagnostic
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    internal_filter: 13us
    update_interval: 10s
    on_value:
      - sensor.template.publish:
          id: voltage
          state: !lambda 'return id(gpio12).state * 0.00623;'
      - sensor.template.publish:
          id: amps
          state: !lambda 'return id(watts).state / id(voltage).state;'
  - platform: pulse_counter
    pin: GPIO13
    id: "gpio13"
    name: "GPIO13 counter"
    # internal: true
    entity_category: diagnostic
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    internal_filter: 13us
    update_interval: 10s
    on_value:
      - sensor.template.publish:
          id: watts
          state: !lambda  |-
            if (id(switch1).state) {
              return id(gpio13).state * 0.07708;
            } else {
              return 0;
            }
      - sensor.template.publish:
          id: amps
          state: !lambda 'return id(watts).state / id(voltage).state;'
  - platform: template
    id: voltage
    name: "Voltage"
    unit_of_measurement: "V"
  - platform: template
    id: watts
    name: "Watts"
    unit_of_measurement: "W"
  - platform: template
    id: amps
    unit_of_measurement: "A"
    name: "Amps"
    accuracy_decimals: 3

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
    # ssid:
    #   name: "SSID"
  - platform: template
    name: "Uptime"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 60s
    # disabled_by_default: true
    entity_category: diagnostic
